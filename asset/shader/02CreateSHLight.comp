#version 430 core


layout (local_size_x=8, local_size_y=4, local_size_z=1) in;

uniform samplerCube cubeMap;

layout (std430, binding = 0) buffer SHLight {
    uvec4 sh[16];
};

const float pi = 3.1415926;

void atomicIntegral(int i, vec3 val)
{
    uint temp;
    float old;
    uint new;
    for (int c = 0; c < 3; ++c)
    {
        do
        {
            temp = sh[i][c];
            old = uintBitsToFloat(temp);
            new = floatBitsToUint(old + val[c]);
        } while(temp != atomicCompSwap(sh[i][c], temp,  new));
    }
}

void main()
{
    uvec3 globalSize = gl_NumWorkGroups * gl_WorkGroupSize;

    float deltaPhi = 2.0 * pi / float(globalSize.x);
    float delatTheta = pi / float(globalSize.y);
    float phi = float(gl_GlobalInvocationID.x) * deltaPhi;
    float theta = float(gl_GlobalInvocationID.y) * delatTheta;

    float cosTheta = cos(theta);
    float sinTheta = sin(theta);
    float cosPhi = cos(phi);
    float sinPhi = sin(phi);

    float basis[16];
    vec3 dir = vec3(sinTheta * cosPhi, cosTheta, sinTheta * sinPhi);
    float x = dir.x, y = dir.y, z = dir.z;
    int index = 0;
    basis[index++] = 1.0/2.0 * sqrt(1.0 / pi);

    basis[index++] = 1.0/2.0 * sqrt(3.0 / pi) * z;
    basis[index++] = 1.0/2.0 * sqrt(3.0 / pi) * x;
    basis[index++] = 1.0/2.0 * sqrt(3.0 / pi) * y;

    basis[index++] = 1.0/4.0 * sqrt(5.0 / pi) * (2.0*z*z - x*x - y*y);
    basis[index++] = 1.0/2.0 * sqrt(15.0 / pi) * (x*z);
    basis[index++] = 1.0/2.0 * sqrt(15.0 / pi) * (y*z);
    basis[index++] = 1.0/4.0 * sqrt(15.0 / pi) * (x*x - y*y);
    basis[index++] = 1.0/2.0 * sqrt(15.0 / pi) * (x*y);

    basis[index++] = 1.0/4.0 * sqrt(7.0 / pi) * z * (2.0*z*z - 3.0*x*x - 3.0*y*y);
    basis[index++] = 1.0/4.0 * sqrt(10.5 / pi) * x * (5.0*z*z - 1.0);
    basis[index++] = 1.0/4.0 * sqrt(10.5 / pi) * y * (5.0*z*z - 1.0);
    basis[index++] = 1.0/4.0 * sqrt(105 / pi) * z * (x*x - y*y);
    basis[index++] = 1.0/2.0 * sqrt(105 / pi) * x * y * z;
    basis[index++] = 1.0/4.0 * sqrt(17.5 / pi) * x * (x*x - 3.0*y*y);
    basis[index++] = 1.0/4.0 * sqrt(17.5 / pi) * y * (3*x*x - y*y);

    vec3 color = textureLod(cubeMap, dir, 0).rgb;
    float sr = delatTheta * deltaPhi * sinTheta;
//    float sr =  (4 * pi / float(globalSize.x*globalSize.y*globalSize.z));
    color *= sr;
    for (int i = 0; i < 16; ++i)
    {
        atomicIntegral(i, color * basis[i]);
    }

//    if (gl_GlobalInvocationID.x == 0 && gl_GlobalInvocationID.y == 0 && gl_GlobalInvocationID.z == 0)
//    {
//        sh[14].x = floatBitsToInt(float(globalSize.x));
//        sh[14].y = floatBitsToInt(float(globalSize.y));
//        sh[14].z = floatBitsToInt(float(globalSize.z));
//    }
//    atomicIntegral(15, vec3(sr, 1.0, 2.0));
}